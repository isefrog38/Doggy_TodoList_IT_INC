{"version":3,"sources":["Component/Task/Task.module.css","Component/AddTodoList/AddTodoList.module.css","Component/RenameSpanFunction.tsx","Component/Button.tsx","Component/AddPanel/AddPanel.tsx","Component/Task/Task.tsx","Component/TodoList/TodoList.tsx","Component/AddTodoList/AddTodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","RenameSpanFunction","title","props","useState","newTitle","setNewTitle","edit","setShowInput","TextField","variant","value","onChange","e","currentTarget","autoFocus","onBlur","editTitleTodolist","onDoubleClick","Buttons","onClickHandler","activeButton","Button","color","onClick","AddPanel","newTaskTitle","setNewTaskTitle","error","setError","addTaskHandler","trim","addTask","id","helperText","label","onKeyPress","ctrlKey","key","IconButton","AddBoxTwoTone","Task","isDone","removeTask","changeTaskStatus","todolistId","editTitleTask","className","s","container","is_done","Checkbox","defaultChecked","checked","DeleteTwoTone","TodoList","tasksComponents","tasks","map","task","taskId","editTitleTaskHand","style","float","removeTodolist","titleOfTodo","filterBS","changeFilter","AddTodolist","addTodolist","newTodolisTitle","setNewTodolistTitle","main","App","task1","v1","task2","tasksObj","setTasks","filter","todolists","setTodolist","f","taskID","t","m","newTask","changeStatus","tasksId","el","Container","maxWidth","AppBar","position","Grid","Toolbar","edge","aria-label","Menu","newId","spacing","tl","tasksForRender","item","Paper","marginTop","padding","alignItems","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4515ff1c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__11lm1\",\"container\":\"Task_container__AJ20M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"AddTodoList_main__1sS9z\",\"error\":\"AddTodoList_error__HVlf8\",\"error_message\":\"AddTodoList_error_message__dtX-2\"};","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype TodoListHeaderPropsType = {\r\n    title: string\r\n    editTitleTodolist: ( title: string) => void\r\n}\r\n\r\nexport function RenameSpanFunction ({title, ...props}: TodoListHeaderPropsType) {\r\n    const [newTitle, setNewTitle] = useState<string>(title);\r\n    const [edit, setShowInput] = useState<boolean>(false);\r\n\r\n    const onClick = () => setShowInput(!edit)\r\n    const onBlurHandler = () => {\r\n        props.editTitleTodolist(newTitle)\r\n        setShowInput(!edit)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setNewTitle(e.currentTarget.value)\r\n\r\n    return (\r\n        edit\r\n           ? <TextField variant={\"standard\"} value={newTitle} onChange={ onChangeHandler } autoFocus onBlur={ onBlurHandler }/>\r\n            : <span onDoubleClick={ onClick } >{title}</span>\r\n\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport s from \"./TodoList/TodoList.module.css\";\r\nimport {FilterValuesType} from \"../App\";\r\nimport {Button} from \"@mui/material\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    activeButton: FilterValuesType\r\n}\r\n\r\nfunction Buttons({title, onClickHandler, activeButton}: ButtonPropsType) {\r\n    return (\r\n        <Button\r\n            color={\"primary\"}\r\n            variant={activeButton === title ? \"contained\" : \"outlined\"}\r\n            onClick={onClickHandler}>\r\n            {title}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default Buttons;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from \"./AddPanel.module.css\";\r\nimport {AddBoxTwoTone} from \"@mui/icons-material\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\n\r\n\r\ntype AddPanelType = {\r\n    id: string\r\n    addTask: ( todolistId: string, title: string) => void\r\n}\r\n\r\nfunction AddPanel(props: AddPanelType) {\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        /*if (e.ctrlKey || e.charCode === 13) {*/\r\n        if (e.ctrlKey || e.key === \"Enter\") {\r\n            addTaskHandler()\r\n        }\r\n    }\r\n    const addTaskHandler = () => {\r\n        if (newTaskTitle.trim() !== \"\") {\r\n            props.addTask(props.id, newTaskTitle.trim())\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required !\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                helperText={error}\r\n                error={!!error}\r\n                variant={\"standard\"}\r\n                label={\"Name of your task\"}\r\n                id={\"outlined-basic\"}\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressAddTask}/>\r\n            <IconButton\r\n                onClick={addTaskHandler}>\r\n                <AddBoxTwoTone />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddPanel;\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {TaskType} from \"../../App\";\r\nimport s from \"./Task.module.css\";\r\nimport {RenameSpanFunction} from \"../RenameSpanFunction\";\r\nimport {DeleteTwoTone} from \"@mui/icons-material\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\n\r\ntype TaskPropsType = TaskType & {\r\n    todolistId: string\r\n    removeTask: (taskID: string, todolistId: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, isDone: boolean) => void\r\n    editTitleTask: (title: string) => void\r\n}\r\n\r\nconst Task: React.FC<TaskPropsType> = ({id, title, isDone, removeTask, changeTaskStatus, todolistId,editTitleTask}) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(todolistId, id, e.currentTarget.checked);\r\n    const onClickRemoveTask = () => removeTask(todolistId, id);\r\n    const onEditTitleTaskHandler = (title: string) => {\r\n        editTitleTask( title)\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <li key={id}\r\n                className={isDone ? s.is_done : \"\"}>\r\n                <Checkbox\r\n                          defaultChecked color=\"default\"\r\n                          checked={isDone}\r\n                          onChange={onChangeHandler}\r\n                />\r\n                <RenameSpanFunction title={title} editTitleTodolist={onEditTitleTaskHandler}/>\r\n                <IconButton\r\n                    onClick={onClickRemoveTask}>\r\n                    <DeleteTwoTone />\r\n                </IconButton>\r\n\r\n            </li>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Task;","import React from 'react';\r\nimport {RenameSpanFunction} from \"../RenameSpanFunction\";\r\nimport Button from \"../Button\";\r\nimport AddPanel from \"../AddPanel/AddPanel\";\r\nimport {FilterValuesType, TaskType} from \"../../App\";\r\nimport Task from \"../Task/Task\";\r\nimport {DeleteTwoTone} from \"@mui/icons-material\";\r\nimport {IconButton} from \"@mui/material\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    titleOfTodo: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistId: string, taskID: string) => void\r\n    changeFilter: (todolistId: string, filter: FilterValuesType) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, isDone: boolean) => void\r\n    filterBS: FilterValuesType\r\n    removeTodolist: (todolistId: string) => void\r\n    editTitleTodolist: (todolistId: string, title: string) => void\r\n    editTitleTask: (todolistId: string, taskId: string, title: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n\r\n    const editTitleTaskHand = (taskId: string, title: string) => {\r\n        props.editTitleTask( props.id, taskId, title)\r\n    }\r\n\r\n    const tasksComponents = props.tasks.map((task) => {\r\n        return (\r\n            <Task\r\n                key={task.id}\r\n                id={task.id}\r\n                todolistId={props.id}\r\n                title={task.title}\r\n                isDone={task.isDone}\r\n                removeTask={props.removeTask}\r\n                changeTaskStatus={props.changeTaskStatus}\r\n                editTitleTask={( title) => editTitleTaskHand(task.id, title)}\r\n                //или деструктуризировать {...task}\r\n            />\r\n        )\r\n    })\r\n\r\n    //  если передаешь сам иншлстэйт то props.changeFilter === \"значение\"\r\n    const onAllClickHandler = () => props.changeFilter(props.id, \"All\");\r\n    const onActiveClickHandler = () => props.changeFilter(props.id, \"Active\");\r\n    const onCompletedClickHandler = () => props.changeFilter(props.id, \"Completed\");\r\n    const editTitleTodolistHandler = (title: string) => props.editTitleTodolist(props.id, title);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <IconButton style={{float:\"right\"}}\r\n                    onClick={() => props.removeTodolist(props.id)}>\r\n                    <DeleteTwoTone />\r\n                </IconButton>\r\n                <h3>\r\n                    <RenameSpanFunction title={props.titleOfTodo} editTitleTodolist={editTitleTodolistHandler}/>\r\n                </h3>\r\n                <AddPanel addTask={props.addTask} id={props.id}/>\r\n\r\n                <ul>\r\n                    {tasksComponents}\r\n                </ul>\r\n                <div>\r\n                    <Button activeButton={props.filterBS}\r\n                            onClickHandler={onAllClickHandler}\r\n                            title={\"All\"}/>\r\n                    <Button activeButton={props.filterBS}\r\n                            onClickHandler={onActiveClickHandler}\r\n                            title={\"Active\"}/>\r\n                    <Button activeButton={props.filterBS}\r\n                            onClickHandler={onCompletedClickHandler}\r\n                            title={\"Completed\"}/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from \"./AddTodoList.module.css\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBoxTwoTone} from \"@mui/icons-material\";\r\n\r\nexport type AddTodolistType = {\r\n    addTodolist: (newTodolistTitle: string) => void\r\n}\r\n\r\nexport const AddTodolist = ({addTodolist, ...props}: AddTodolistType) => {\r\n\r\n    const [newTodolisTitle, setNewTodolistTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTodolistTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTodo = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.ctrlKey || e.key === \"Enter\") {\r\n            addTaskHandler()\r\n        }\r\n    }\r\n    const addTaskHandler = () => {\r\n        if (newTodolisTitle.trim() !== \"\") {\r\n            addTodolist(newTodolisTitle)\r\n            setNewTodolistTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required !\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <div>\r\n                <TextField\r\n                    helperText={error}\r\n                    error={!!error}\r\n                    variant={\"standard\"}\r\n                    label={\"Add Name to Todolist\"}\r\n                    id={\"outlined-basic\"}\r\n                    value={newTodolisTitle}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressAddTodo}/>\r\n                <IconButton\r\n                    onClick={addTaskHandler}>\r\n                    <AddBoxTwoTone/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./Component/TodoList/TodoList\";\r\nimport {v1} from 'uuid';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar} from \"@mui/material\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {AddTodolist} from \"./Component/AddTodoList/AddTodoList\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type FilterValuesType = \"All\" | \"Active\" | \"Completed\"\r\n\r\nconst App = () => {\r\n\r\n    const task1 = v1();\r\n    const task2 = v1();\r\n    let [tasksObj, setTasks] = useState({\r\n        [task1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS/ES6\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: true},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"Bootstrap\", isDone: false},\r\n        ],\r\n        [task2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Chips\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: false},\r\n            {id: v1(), title: \"Meat\", isDone: false},\r\n        ],\r\n    })\r\n    let [todolists, setTodolist] = useState<Array<TodoListsType>>([\r\n        {id: task1, title: \"What to learn\", filter: \"All\"},\r\n        {id: task2, title: \"What to buy\", filter: \"All\"},\r\n    ])\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        setTodolist(todolists.filter(f => f.id !== todolistId ? delete tasksObj[todolistId] : setTasks({...tasksObj})))\r\n    }\r\n    const removeTask = (todolistId: string, taskID: string) => {\r\n        setTasks({...tasksObj, [todolistId]: tasksObj[todolistId].filter(t => t.id !== taskID)})\r\n    }\r\n    const changeFilter = (todolistId: string, value: FilterValuesType) => {\r\n        setTodolist(todolists.map((m) => m.id === todolistId ? {...m, filter: value} : m));\r\n    }\r\n    const addTask = (todolistId: string, title: string) => {\r\n        let newTask = {id: v1(), title, isDone: false}\r\n        setTasks({...tasksObj, [todolistId]: [newTask, ...tasksObj[todolistId]]})\r\n    }\r\n    const changeStatus = (todolistId: string, tasksId: string, isDone: boolean) => {\r\n        setTasks({\r\n            ...tasksObj,\r\n            [todolistId]: [...tasksObj[todolistId].map(t => t.id === tasksId ? {...t, isDone} : t)]\r\n        });\r\n    }\r\n    const addTodolist = (title: string) => {\r\n        let newId = v1();\r\n        let newTodolist: TodoListsType = {id: newId, title, filter: \"All\"}\r\n        setTodolist([newTodolist, ...todolists]);\r\n        setTasks({[newId]: [], ...tasksObj})\r\n    }\r\n    const editTitleTodolist = (todolistId: string, title: string) => {\r\n        setTodolist(todolists.map(e => e.id === todolistId ? {...e, title} : e))\r\n    }\r\n    const editTitleTask = (todolistId: string, taskId: string, title: string) => {\r\n        setTasks({...tasksObj, [todolistId]: tasksObj[todolistId].map(el => el.id === taskId ? {...el, title} : el)})\r\n    }\r\n\r\n    //UI\r\n    return (\r\n        <Container maxWidth={\"xl\"} className={\"App\"}>\r\n            <AppBar position={\"static\"}>\r\n                <Grid container>\r\n                    <Toolbar>\r\n                        <IconButton edge={\"start\"} color={\"inherit\"} aria-label={\"menu\"} >\r\n                            <Menu/>\r\n                        </IconButton>\r\n\r\n                        <AddTodolist addTodolist={addTodolist}/>\r\n                        <Button variant={\"outlined\"} color={\"inherit\"} >Login</Button>\r\n                    </Toolbar>\r\n                </Grid>\r\n            </AppBar>\r\n\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map((tl) => {\r\n                            // Sam Filter\r\n                            let tasksForRender = tasksObj[tl.id]\r\n                            if (tl.filter === \"Active\") {\r\n                                tasksForRender = tasksForRender.filter(t => !t.isDone)\r\n                            } else if (tl.filter === \"Completed\") {\r\n                                tasksForRender = tasksForRender.filter(t => t.isDone)\r\n                            }\r\n\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper style={{marginTop: \"30px\", padding: \"30px\", alignItems: \"center\"}} elevation={3}>\r\n                                        <TodoList\r\n                                            // ключи обязательны\r\n                                            key={tl.id}\r\n                                            // id\r\n                                            id={tl.id}\r\n                                            // name\r\n                                            titleOfTodo={tl.title}\r\n                                            // useState\r\n                                            tasks={tasksForRender}\r\n                                            // props na remove\r\n                                            removeTask={removeTask}\r\n                                            // props na button filter\r\n                                            changeFilter={changeFilter}\r\n                                            // addTask\r\n                                            addTask={addTask}\r\n                                            // changeStatus\r\n                                            changeTaskStatus={changeStatus}\r\n                                            // filter button style\r\n                                            filterBS={tl.filter}\r\n                                            // delete All todoLIST\r\n                                            removeTodolist={removeTodolist}\r\n                                            // RenameTitleTODOLIST\r\n                                            editTitleTodolist={editTitleTodolist}\r\n                                            // taskRename\r\n                                            editTitleTask={editTitleTask}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}