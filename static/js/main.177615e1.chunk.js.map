{"version":3,"sources":["Component/Task/Task.module.css","Component/AddTodoList/AddTodoList.module.css","Component/RenameSpanFunction.tsx","Component/Button.tsx","Component/AddPanel/AddPanel.tsx","Redux-Reducers/Todolist-Reducer.ts","Redux-Reducers/Task-Reducer.ts","Component/Task/Task.tsx","Component/TodoList/TodoList.tsx","Component/AddTodoList/AddTodoList.tsx","App.tsx","serviceWorker.ts","Redux-Reducers/redux-state.ts","index.tsx"],"names":["module","exports","RenameSpanFunction","props","useState","title","newTitle","setNewTitle","edit","setShowInput","TextField","style","width","color","variant","value","onChange","e","currentTarget","autoFocus","onBlur","editTitle","onDoubleClick","Buttons","onClickHandler","activeButton","Button","onClick","AddPanel","React","memo","newTaskTitle","setNewTaskTitle","error","setError","addTaskHandler","trim","addTask","id","size","helperText","label","onKeyPress","ctrlKey","key","IconButton","AddBoxTwoTone","todolistId1","v1","initialState","filter","changeFilterAC","todolistId","type","isDone","Task","taskId","dispatch","useDispatch","task","useSelector","state","taskReducer","find","t","className","s","container","is_done","Checkbox","checked","taskID","changeStatusTaskAC","editTitleTaskAC","removeTaskAC","DeleteTwoTone","TodoList","filterBS","tasks","todoList","todolistReducer","tasksComponents","map","float","removeTodolistAC","editTitleTodolistAC","addTaskAC","AddTodolist","addTodolist","newTodolisTitle","setNewTodolistTitle","main","App","todoLists","Container","maxWidth","AppBar","position","Grid","Toolbar","aria-label","Menu","addTodolistAC","spacing","tl","item","Paper","marginTop","padding","alignItems","elevation","Boolean","window","location","hostname","match","storeRedux","combineReducers","action","f","todolist","stateCopy","newTask","el","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.177615e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__11lm1\",\"container\":\"Task_container__AJ20M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"AddTodoList_main__1sS9z\",\"error\":\"AddTodoList_error__HVlf8\",\"error_message\":\"AddTodoList_error_message__dtX-2\"};","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype TodoListHeaderPropsType = {\r\n    title: string\r\n    editTitle: ( title: string) => void\r\n}\r\n\r\nexport function RenameSpanFunction (props: TodoListHeaderPropsType) {\r\n    const [newTitle, setNewTitle] = useState<string>(props.title);\r\n    const [edit, setShowInput] = useState<boolean>(false);\r\n\r\n    const onClick = () => setShowInput(!edit)\r\n    const onBlurHandler = () => {\r\n        props.editTitle(newTitle)\r\n        setShowInput(!edit)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setNewTitle(e.currentTarget.value)\r\n\r\n    return (\r\n        edit\r\n           ? <TextField style={{width: \"120px\"}} color={\"secondary\"} variant={\"standard\"} value={newTitle} onChange={ onChangeHandler } autoFocus onBlur={ onBlurHandler }/>\r\n            : <span onDoubleClick={ onClick } >{props.title}</span>\r\n\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\nimport {FilterValuesType} from \"../Redux-Reducers/Task-Reducer\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    activeButton: FilterValuesType\r\n}\r\n\r\nfunction Buttons({title, onClickHandler, activeButton}: ButtonPropsType) {\r\n    return (\r\n        <Button\r\n            color={activeButton === title ? \"secondary\" : \"secondary\"}\r\n            variant={activeButton === title ? \"contained\" : \"outlined\"}\r\n            onClick={onClickHandler}>\r\n            {title}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default Buttons;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBoxTwoTone} from \"@mui/icons-material\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\n\r\n\r\ntype AddPanelType = {\r\n    id: string\r\n    addTask: (todolistId: string, title: string) => void\r\n}\r\n\r\nexport const AddPanel = React.memo((props: AddPanelType) => {\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.ctrlKey || e.key === \"Enter\") {\r\n            addTaskHandler()\r\n        }\r\n    }\r\n    const addTaskHandler = () => {\r\n        if (newTaskTitle.trim() !== \"\") {\r\n            props.addTask(props.id, newTaskTitle.trim())\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required !\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                color={\"secondary\"}\r\n                helperText={error}\r\n                error={!!error}\r\n                variant={\"standard\"}\r\n                label={\"Name of your task\"}\r\n                id={\"outlined-basic\"}\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressAddTask}/>\r\n            <IconButton\r\n                onClick={addTaskHandler}>\r\n                <AddBoxTwoTone />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n\r\n","import {v1} from 'uuid'\r\nimport {FilterValuesType} from './Task-Reducer'\r\n\r\nexport type ActionsTodolistTypes =\r\n    AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | ChangeFilterTodolistActionType\r\n    | EditTitleTodolistActionType;\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type ChangeFilterTodolistActionType = ReturnType<typeof changeFilterAC>;\r\nexport type EditTitleTodolistActionType = ReturnType<typeof editTitleTodolistAC>;\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n};\r\nexport type InitialStateType = TodoListsType[];\r\n\r\nexport const todolistId1 = v1()\r\nexport const todolistId2 = v1()\r\n\r\nconst ADD_TODOLIST = 'ADD_TODOLIST';\r\nconst CHANGE_FILTER_TODOLIST = 'CHANGE_FILTER_TODOLIST';\r\nconst EDIT_TITLE_TODOLIST = 'EDIT_TITLE_TODOLIST';\r\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST';\r\n\r\nconst initialState: InitialStateType = [\r\n    {id: todolistId1, title: 'What to learn', filter: 'All'},\r\n]\r\n\r\nexport const todolistReducer = (\r\n    state = initialState,\r\n    action: ActionsTodolistTypes\r\n): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST: {\r\n            return [\r\n                {id: action.id, title: action.title, filter: 'All'},\r\n                ...state\r\n            ]\r\n        }\r\n        case REMOVE_TODOLIST: {\r\n            return state.filter((f) => f.id !== action.todolistId)\r\n        }\r\n        case CHANGE_FILTER_TODOLIST: {\r\n            return state.map((todolist) =>\r\n                todolist.id === action.todolistId\r\n                    ? {...todolist, filter: action.filter}\r\n                    : todolist\r\n            )\r\n        }\r\n        case EDIT_TITLE_TODOLIST: {\r\n            return state.map((e) =>\r\n                e.id === action.todolistId ? {...e, title: action.title} : e\r\n            )\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTodolistAC = (title: string) => {\r\n    return {type: ADD_TODOLIST, title, id: v1()} as const\r\n};\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {type: REMOVE_TODOLIST, todolistId} as const\r\n};\r\nexport const changeFilterAC = (todolistId: string, filter: FilterValuesType) => {\r\n    return {type: CHANGE_FILTER_TODOLIST, todolistId, filter} as const\r\n};\r\nexport const editTitleTodolistAC = (todolistId: string, title: string) => {\r\n    return {type: EDIT_TITLE_TODOLIST, todolistId, title} as const\r\n};\r\n","import {v1} from 'uuid'\r\nimport {AddTodolistActionType, todolistId1} from './Todolist-Reducer'\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n};\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed';\r\ntype AllActionTaskType =\r\n    AddTaskActionType\r\n    | RemoveTaskActionType\r\n    | ChangeStatusTaskActionType\r\n    | EditTitleTaskActionType\r\n    | AddTodolistActionType;\r\nexport type initialStateType = {\r\n    [key: string]: TaskType[]\r\n};\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>;\r\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>;\r\ntype ChangeStatusTaskActionType = ReturnType<typeof changeStatusTaskAC>;\r\ntype EditTitleTaskActionType = ReturnType<typeof editTitleTaskAC>;\r\n\r\nconst ADD_TASK = 'ADD_TASK';\r\nconst REMOVE_TASK = 'REMOVE_TASK';\r\nconst CHANGE_STATUS_TASK = 'CHANGE_STATUS_TASK';\r\nconst EDIT_TITLE_TASK = 'EDIT_TITLE_TASK';\r\n\r\nconst initialState: initialStateType = {\r\n    [todolistId1]: [\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS/ES6', isDone: true},\r\n        {id: v1(), title: 'React', isDone: true},\r\n        {id: v1(), title: 'Redux-Reducers', isDone: false},\r\n        {id: v1(), title: 'Bootstrap', isDone: false},\r\n    ],\r\n};\r\n\r\nexport const taskReducer = (state = initialState, action: AllActionTaskType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_TODOLIST': {\r\n            const stateCopy = {...state, [action.id]: []}\r\n            return stateCopy\r\n        }\r\n        case ADD_TASK: {\r\n            let newTask = {id: v1(), title: action.title, isDone: false}\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [newTask, ...state[action.todolistId]],\r\n            }\r\n        }\r\n        case REMOVE_TASK: {\r\n            const stateCopy = {...state}\r\n            const tasks = state[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.filter(\r\n                (t) => t.id !== action.taskID\r\n            )\r\n            return stateCopy\r\n        }\r\n        case EDIT_TITLE_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map((el) =>\r\n                    el.id === action.taskId ? {...el, title: action.title} : el\r\n                ),\r\n            }\r\n        }\r\n        case CHANGE_STATUS_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map((el) =>\r\n                    el.id === action.taskID ? {...el, isDone: action.isDone} : el\r\n                ),\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (todolistId: string, title: string) => {\r\n    return {type: ADD_TASK, todolistId, title} as const\r\n};\r\nexport const removeTaskAC = (taskID: string, todolistId: string) => {\r\n    return {type: REMOVE_TASK, todolistId, taskID} as const\r\n};\r\nexport const changeStatusTaskAC = (todolistId: string, taskID: string, isDone: boolean) => {\r\n    return {type: CHANGE_STATUS_TASK, todolistId, taskID, isDone} as const\r\n};\r\nexport const editTitleTaskAC = (todolistId: string, taskId: string, title: string) => {\r\n    return {type: EDIT_TITLE_TASK, todolistId, taskId, title} as const\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from \"./Task.module.css\";\r\nimport {RenameSpanFunction} from \"../RenameSpanFunction\";\r\nimport {DeleteTwoTone} from \"@mui/icons-material\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {changeStatusTaskAC, editTitleTaskAC, removeTaskAC, TaskType} from \"../../Redux-Reducers/Task-Reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StoreType} from \"../../Redux-Reducers/redux-state\";\r\n\r\ntype TaskPropsType = {\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = ({todolistId, taskId}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const task = useSelector<StoreType, TaskType | undefined>(state => state.taskReducer[todolistId].find(t => t.id === taskId));\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => dispatch(changeStatusTaskAC(todolistId, taskId, e.currentTarget.checked));\r\n    const onClickRemoveTask = () => dispatch(removeTaskAC(taskId, todolistId));\r\n    const onEditTitleTaskHandler = (title: string) => dispatch(editTitleTaskAC(title, todolistId, taskId));\r\n\r\n    if(!task) return <div>Error...</div>\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <li key={taskId}\r\n                className={task.isDone ? s.is_done : \"\"}>\r\n                <Checkbox\r\n                    color=\"default\"\r\n                          checked={task.isDone}\r\n                          onChange={onChangeHandler}\r\n                />\r\n                <RenameSpanFunction title={task.title} editTitle={onEditTitleTaskHandler}/>\r\n                <IconButton\r\n                    onClick={onClickRemoveTask}>\r\n                    <DeleteTwoTone />\r\n                </IconButton>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { RenameSpanFunction } from '../RenameSpanFunction'\r\nimport Button from '../Button'\r\nimport { AddPanel } from '../AddPanel/AddPanel'\r\nimport { DeleteTwoTone } from '@mui/icons-material'\r\nimport { IconButton } from '@mui/material'\r\nimport {\r\n   addTaskAC,\r\n   FilterValuesType,\r\n   TaskType,\r\n} from '../../Redux-Reducers/Task-Reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { StoreType } from '../../Redux-Reducers/redux-state'\r\nimport { Task } from '../Task/Task'\r\nimport {\r\n   changeFilterAC,\r\n   editTitleTodolistAC,\r\n   removeTodolistAC,\r\n   TodoListsType,\r\n} from '../../Redux-Reducers/Todolist-Reducer'\r\nimport { tabsListUnstyledClasses } from '@mui/base'\r\n\r\ntype TodoListPropsType = {\r\n   todolistId: string\r\n   filterBS: FilterValuesType\r\n}\r\n\r\nfunction TodoList({ todolistId, filterBS }: TodoListPropsType) {\r\n   const dispatch = useDispatch()\r\n   const tasks = useSelector<StoreType, TaskType[]>(\r\n      (state) => state.taskReducer[todolistId]\r\n   )\r\n   const todoList = useSelector<StoreType, TodoListsType>(\r\n      (state) => state.todolistReducer.filter((e) => e.id === todolistId)[0]\r\n   )\r\n\r\n   let filteredTasks = (filter: FilterValuesType) => {\r\n      if (filter === 'Active') {\r\n         return tasks.filter((e) => !e.isDone)\r\n      } else if (filter === 'Completed') {\r\n         return tasks.filter((e) => e.isDone)\r\n      } else return tasks\r\n   }\r\n\r\n   const tasksComponents = filteredTasks(todoList.filter).map((task) => {\r\n      return <Task key={task.id} taskId={task.id} todolistId={todolistId} />\r\n   })\r\n\r\n   const onAllClickHandler = () => dispatch(changeFilterAC(todolistId, 'All'))\r\n   const onActiveClickHandler = () =>\r\n      dispatch(changeFilterAC(todolistId, 'Active'))\r\n   const onCompletedClickHandler = () => {\r\n      dispatch(changeFilterAC(todolistId, 'Completed'))\r\n   }\r\n\r\n   const editTitleTodolistHandler = (title: string) =>\r\n      dispatch(editTitleTodolistAC(todolistId, title))\r\n   const RemoveTodolist = () => dispatch(removeTodolistAC(todolistId))\r\n\r\n   const addTask = (todolistId: string, title: string) =>\r\n      dispatch(addTaskAC(todolistId, title))\r\n\r\n   return (\r\n      <>\r\n         <div>\r\n            <IconButton style={{ float: 'right' }} onClick={RemoveTodolist}>\r\n               <DeleteTwoTone />\r\n            </IconButton>\r\n            <h3>\r\n               <RenameSpanFunction\r\n                  title={todoList.title}\r\n                  editTitle={editTitleTodolistHandler}\r\n               />\r\n            </h3>\r\n            <AddPanel addTask={addTask} id={todolistId} />\r\n            <ul>{tasksComponents}</ul>\r\n            <div>\r\n               <Button\r\n                  activeButton={filterBS}\r\n                  onClickHandler={onAllClickHandler}\r\n                  title={'All'}\r\n               />\r\n               <Button\r\n                  activeButton={filterBS}\r\n                  onClickHandler={onActiveClickHandler}\r\n                  title={'Active'}\r\n               />\r\n               <Button\r\n                  activeButton={filterBS}\r\n                  onClickHandler={onCompletedClickHandler}\r\n                  title={'Completed'}\r\n               />\r\n            </div>\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default TodoList\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from \"./AddTodoList.module.css\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBoxTwoTone} from \"@mui/icons-material\";\r\n\r\nexport type AddTodolistType = {\r\n    addTodolist: (newTodolistTitle: string) => void\r\n}\r\n\r\nexport const AddTodolist = ({addTodolist, ...props}: AddTodolistType) => {\r\n\r\n    const [newTodolisTitle, setNewTodolistTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTodolistTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTodo = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.ctrlKey || e.key === \"Enter\") {\r\n            addTaskHandler()\r\n        }\r\n    }\r\n    const addTaskHandler = () => {\r\n        if (newTodolisTitle.trim() !== \"\") {\r\n            addTodolist(newTodolisTitle)\r\n            setNewTodolistTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required !\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <div>\r\n                <TextField\r\n                    size={\"small\"}\r\n                    helperText={error}\r\n                    error={!!error}\r\n                    variant={\"standard\"}\r\n                    label={\"Add Name to Todolist\"}\r\n                    id={\"outlined-basic\"}\r\n                    value={newTodolisTitle}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressAddTodo}/>\r\n                <IconButton\r\n                    onClick={addTaskHandler}>\r\n                    <AddBoxTwoTone/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react'\r\nimport './App.css'\r\nimport TodoList from './Component/TodoList/TodoList'\r\nimport AppBar from '@mui/material/AppBar'\r\nimport Button from '@mui/material/Button'\r\nimport Container from '@mui/material/Container'\r\nimport Grid from '@mui/material/Grid'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport Paper from '@mui/material/Paper'\r\nimport Toolbar from '@mui/material/Toolbar'\r\nimport { Menu } from '@mui/icons-material'\r\nimport { AddTodolist } from './Component/AddTodoList/AddTodoList'\r\nimport { addTodolistAC, TodoListsType } from './Redux-Reducers/Todolist-Reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { StoreType } from './Redux-Reducers/redux-state'\r\n\r\nexport const App = React.memo(() => {\r\n\r\n   const dispatch = useDispatch()\r\n   const todoLists = useSelector<StoreType, TodoListsType[]>(\r\n      (state) => state.todolistReducer\r\n   )\r\n\r\n   const addTodolist = (title: string) => {\r\n      dispatch(addTodolistAC(title))\r\n   }\r\n\r\n   //UI\r\n   return (\r\n      <Container maxWidth={'xl'} className={'App'}>\r\n         <AppBar position={'static'} color={'secondary'}>\r\n            <Grid container>\r\n               <Toolbar>\r\n                  <IconButton\r\n                     color={'inherit'}\r\n                     aria-label={'menu'}\r\n                     size=\"large\"\r\n                  >\r\n                     <Menu />\r\n                  </IconButton>\r\n                  <AddTodolist addTodolist={addTodolist} />\r\n                  <Button variant={'outlined'} color={'inherit'}>\r\n                     Login\r\n                  </Button>\r\n               </Toolbar>\r\n            </Grid>\r\n         </AppBar>\r\n\r\n         <Grid container spacing={3}>\r\n            {todoLists.map((tl) => {\r\n\r\n               return (\r\n                  <Grid item key={tl.id}>\r\n                     <Paper\r\n                        style={{\r\n                           marginTop: '30px',\r\n                           padding: '30px',\r\n                           alignItems: 'center',\r\n                        }}\r\n                        elevation={3}\r\n                     >\r\n                        <TodoList\r\n                           key={tl.id}\r\n                           todolistId={tl.id}\r\n                           filterBS={tl.filter}\r\n                        />\r\n                     </Paper>\r\n                  </Grid>\r\n               )\r\n            })}\r\n         </Grid>\r\n      </Container>\r\n   )\r\n})\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistReducer} from \"./Todolist-Reducer\";\r\nimport {taskReducer} from \"./Task-Reducer\";\r\n\r\nexport type StoreType = ReturnType<typeof storeRedux>\r\n\r\nconst storeRedux = combineReducers({\r\n    todolistReducer,\r\n    taskReducer\r\n})\r\n\r\nexport const store = createStore(storeRedux);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./Redux-Reducers/redux-state\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}