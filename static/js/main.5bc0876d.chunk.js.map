{"version":3,"sources":["Component/Task/Task.module.css","Component/AddTodoList/AddTodoList.module.css","Component/RenameSpanFunction.tsx","Component/Button.tsx","Component/AddPanel/AddPanel.tsx","Redux-Reducers/Todolist-Reducer.ts","Redux-Reducers/Task-Reducer.ts","Component/Task/Task.tsx","Component/TodoList/TodoList.tsx","Component/AddTodoList/AddTodoList.tsx","App.tsx","serviceWorker.ts","Redux-Reducers/store-redux.ts","index.tsx"],"names":["module","exports","RenameSpanFunction","props","useState","title","newTitle","setNewTitle","edit","setShowInput","TextField","style","width","color","variant","value","onChange","e","currentTarget","autoFocus","onBlur","editTitle","onDoubleClick","Buttons","onClickHandler","activeButton","Button","onClick","AddPanel","React","memo","newTaskTitle","setNewTaskTitle","error","setError","addTaskHandler","trim","addTask","id","size","helperText","label","onKeyPress","ctrlKey","key","autoComplete","IconButton","AddBoxTwoTone","todolistId1","v1","initialState","filter","changeFilterAC","todolistId","type","isDone","Task","taskId","dispatch","useDispatch","task","useSelector","state","taskReducer","find","t","className","s","container","is_done","Checkbox","checked","taskID","changeStatusTaskAC","editTitleTaskAC","removeTaskAC","DeleteTwoTone","TodoList","filterBS","tasks","todoList","todolistReducer","tasksComponents","map","float","removeTodolistAC","editTitleTodolistAC","addTaskAC","AddTodolist","addTodolist","newTodolistTitle","setNewTodolistTitle","main","App","todoLists","AppBar","position","Container","maxWidth","Grid","Toolbar","aria-label","Menu","addTodolistAC","spacing","tl","item","Paper","margin","padding","alignItems","elevation","Boolean","window","location","hostname","match","storeRedux","combineReducers","action","f","todolist","newTask","el","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,QAAU,sBAAsB,UAAY,0B,mBCA9DD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,cAAgB,qC,yLCO/F,SAASC,EAAoBC,GAChC,MAAgCC,mBAAiBD,EAAME,OAAvD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA6BH,oBAAkB,GAA/C,mBAAOI,EAAP,KAAaC,EAAb,KASA,OACID,EACK,kBAACE,EAAA,EAAD,CAAWC,MAAO,CAACC,MAAO,SAAUC,MAAO,UAAWC,QAAS,WAAYC,MAAOT,EAAUU,SAJ7E,SAACC,GAAD,OAAsCV,EAAYU,EAAEC,cAAcH,QAIwCI,WAAS,EAACC,OARtH,WAClBjB,EAAMkB,UAAUf,GAChBG,GAAcD,MAOR,0BAAMc,cAVA,kBAAMb,GAAcD,KAUQL,EAAME,O,aCDvCkB,MAXf,YAA0E,IAAxDlB,EAAuD,EAAvDA,MAAOmB,EAAgD,EAAhDA,eAAgBC,EAAgC,EAAhCA,aACrC,OACI,kBAACC,EAAA,EAAD,CACIb,MAAgC,UAChCC,QAASW,IAAiBpB,EAAQ,YAAc,WAChDsB,QAASH,GACRnB,I,kBCNAuB,EAAWC,IAAMC,MAAK,SAAC3B,GAEhC,MAAwCC,mBAAiB,IAAzD,mBAAO2B,EAAP,KAAqBC,EAArB,KACA,EAA0B5B,mBAAwB,MAAlD,mBAAO6B,EAAP,KAAcC,EAAd,KAWMC,EAAiB,WACS,KAAxBJ,EAAaK,QACbjC,EAAMkC,QAAQlC,EAAMmC,GAAIP,EAAaK,QACrCJ,EAAgB,KAEhBE,EAAS,wBAIjB,OACI,6BACI,kBAACxB,EAAA,EAAD,CACI6B,KAAM,QACN1B,MAAO,UACP2B,WAAYP,EACZA,QAASA,EACTnB,QAAS,WACT2B,MAAO,oBACPH,GAAI,iBACJvB,MAAOgB,EACPf,SA7BY,SAACC,GACrBe,EAAgBf,EAAEC,cAAcH,QA6BxB2B,WA3Bc,SAACzB,GACvBiB,EAAS,OACLjB,EAAE0B,SAAqB,UAAV1B,EAAE2B,MACfT,KAyBIU,aAAc,YAClB,kBAACC,EAAA,EAAD,CACInB,QAASQ,GACT,kBAACY,EAAA,EAAD,W,wCC7BHC,EAAcC,eACrBC,EAAiC,CACnC,CAACZ,GAAIU,EAAa3C,MAAO,gBAAiB8C,OAAQ,QAqCzCC,EAAiB,SAACC,EAAoBF,GAC/C,MAAO,CAACG,KA5CmB,yBA4CWD,aAAYF,WCrChDD,EAA8B,eAC/BF,EAAc,CACX,CAACV,GAAIW,eAAM5C,MAAO,WAAYkD,QAAQ,GACtC,CAACjB,GAAIW,eAAM5C,MAAO,SAAUkD,QAAQ,GACpC,CAACjB,GAAIW,eAAM5C,MAAO,QAASkD,QAAQ,GACnC,CAACjB,GAAIW,eAAM5C,MAAO,iBAAkBkD,QAAQ,GAC5C,CAACjB,GAAIW,eAAM5C,MAAO,YAAakD,QAAQ,K,kCCflCC,EAAgC3B,IAAMC,MAAK,YAA2B,IAAzBuB,EAAwB,EAAxBA,WAAYI,EAAY,EAAZA,OAE5DC,EAAWC,cACXC,EAAOC,aAA6C,SAAAC,GAAK,OAAIA,EAAMC,YAAYV,GAAYW,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOmB,QAMpH,OAAIG,EAGA,yBAAKM,UAAWC,IAAEC,WACd,wBAAIxB,IAAKa,EACLS,UAAWN,EAAKL,OAASY,IAAEE,QAAU,IACrC,kBAACC,EAAA,EAAD,CACIzD,MAAM,UACA0D,QAASX,EAAKL,OACdvC,SAbE,SAACC,GAAD,OAAsCyC,ED0DhC,SAACL,EAAoBmB,EAAgBjB,GACnE,MAAO,CAACD,KA1De,qBA0DWD,aAAYmB,SAAQjB,UC3DiBkB,CAAmBpB,EAAYI,EAAQxC,EAAEC,cAAcqD,aAelH,kBAACrE,EAAD,CAAoBG,MAAOuD,EAAKvD,MAAOgB,UAbpB,SAAChB,GAAD,OAAmBqD,ED2DvB,SAACL,EAAoBI,EAAgBpD,GAChE,MAAO,CAACiD,KA5DY,kBA4DWD,aAAYI,SAAQpD,SC5DQqE,CAAgBrB,EAAYI,EAAQpD,OAcnF,kBAACyC,EAAA,EAAD,CACInB,QAhBU,kBAAM+B,EDsDR,SAACc,EAAgBnB,GACzC,MAAO,CAACC,KAxDQ,cAwDWD,aAAYmB,UCvDEG,CAAalB,EAAQJ,MAiB9C,kBAACuB,EAAA,EAAD,SAdC,4CCNRC,EAAWhD,IAAMC,MAAK,YAAkD,IAS7DqB,EATcE,EAA8C,EAA9CA,WAAYyB,EAAkC,EAAlCA,SACzCpB,EAAWC,cACXoB,EAAQlB,aACX,SAACC,GAAD,OAAWA,EAAMC,YAAYV,MAE1B2B,EAAWnB,aACd,SAACC,GAAD,OAAWA,EAAMmB,gBAAgB9B,QAAO,SAAClC,GAAD,OAAOA,EAAEqB,KAAOe,KAAY,MAWjE6B,GARe/B,EAQiB6B,EAAS7B,OAP7B,WAAXA,EACM4B,EAAM5B,QAAO,SAAClC,GAAD,OAAQA,EAAEsC,UACX,cAAXJ,EACD4B,EAAM5B,QAAO,SAAClC,GAAD,OAAOA,EAAEsC,UAClBwB,GAGsCI,KAAI,SAACvB,GACzD,OAAO,kBAACJ,EAAD,CAAMZ,IAAKgB,EAAKtB,GAAImB,OAAQG,EAAKtB,GAAIe,WAAYA,OAe3D,OACG,oCACG,6BACG,kBAACP,EAAA,EAAD,CAAYnC,MAAO,CAAEyE,MAAO,SAAWzD,QARzB,kBAAM+B,EHWA,SAACL,GAC7B,MAAO,CAACC,KAvCY,kBAuCWD,cGZMgC,CAAiBhC,MAS3C,kBAACuB,EAAA,EAAD,OAEH,4BACG,kBAAC1E,EAAD,CACGG,MAAO2E,EAAS3E,MAChBgB,UAhBkB,SAAChB,GAAD,OAC9BqD,EHkB6B,SAACL,EAAoBhD,GACpD,MAAO,CAACiD,KA9CgB,sBA8CWD,aAAYhD,SGnBpCiF,CAAoBjC,EAAYhD,QAkBnC,kBAACuB,EAAD,CAAUS,QAfH,SAACgB,EAAoBhD,GAArB,OACbqD,EFuBmB,SAACL,EAAoBhD,GAC1C,MAAO,CAACiD,KAtDK,WAsDWD,aAAYhD,SExBzBkF,CAAUlC,EAAYhD,KAcGiC,GAAIe,IAChC,4BAAK6B,GACL,6BACG,kBAAC,EAAD,CACGzD,aAAcqD,EACdtD,eA5BW,kBAAMkC,EAASN,EAAeC,EAAY,SA6BrDhD,MAAO,QAEV,kBAAC,EAAD,CACGoB,aAAcqD,EACdtD,eAhCc,kBAAMkC,EAASN,EAAeC,EAAY,YAiCxDhD,MAAO,WAEV,kBAAC,EAAD,CACGoB,aAAcqD,EACdtD,eApCiB,kBAAMkC,EAASN,EAAeC,EAAY,eAqC3DhD,MAAO,oB,iGCrEZmF,EAAc3D,IAAMC,MAAK,YAA+C,IAA7C2D,EAA4C,EAA5CA,YAEpC,GAFgF,iBAEhCrF,mBAAiB,KAAjE,mBAAOsF,EAAP,KAAyBC,EAAzB,KACA,EAA0BvF,mBAAwB,MAAlD,mBAAO6B,EAAP,KAAcC,EAAd,KAWMC,EAAiB,WACa,KAA5BuD,EAAiBtD,QACjBqD,EAAYC,GACZC,EAAoB,KAEpBzD,EAAS,wBAIjB,OACI,yBAAKgC,UAAWC,IAAEyB,MACd,6BACI,kBAAClF,EAAA,EAAD,CACI6B,KAAM,QACNC,WAAYP,EACZpB,MAAO,UACPoB,QAASA,EACTnB,QAAS,WACT2B,MAAO,uBACPH,GAAI,iBACJvB,MAAO2E,EACP1E,SA9BQ,SAACC,GACrB0E,EAAoB1E,EAAEC,cAAcH,QA8BxB2B,WA5BU,SAACzB,GACvBiB,EAAS,OACLjB,EAAE0B,SAAqB,UAAV1B,EAAE2B,MACfT,OA2BI,kBAACW,EAAA,EAAD,CACInB,QAASQ,GACT,kBAACY,EAAA,EAAD,YClCP8C,EAAMhE,IAAMC,MAAK,WAE1B,IAAM4B,EAAWC,cACXmC,EAAYjC,aACd,SAACC,GAAD,OAAWA,EAAMmB,mBAQrB,OACI,yBAAKf,UAAW,OACZ,kBAAC6B,EAAA,EAAD,CAAQC,SAAU,SAAUnF,MAAO,WAC/B,kBAACoF,EAAA,EAAD,CAAWC,SAAU,MACjB,kBAACC,EAAA,EAAD,CAAM/B,WAAS,GACX,kBAACgC,EAAA,EAAD,KACI,kBAACtD,EAAA,EAAD,CACIjC,MAAO,UACPwF,aAAY,OACZ9D,KAAK,SAEL,kBAAC+D,EAAA,EAAD,OAEJ,kBAACd,EAAD,CAAaC,YAlBjB,SAACpF,GACjBqD,EL8BqB,SAACrD,GAC1B,MAAO,CAACiD,KAvCgB,eAuCIjD,QAAOiC,GAAIW,gBK/B1BsD,CAAclG,WAuBnB,kBAAC8F,EAAA,EAAD,CAAM/B,WAAS,EAACoC,QAAS,GACpBV,EAAUX,KAAI,SAACsB,GAEZ,OACI,kBAACN,EAAA,EAAD,CAAMO,MAAI,EAAC9D,IAAK6D,EAAGnE,IACf,kBAACqE,EAAA,EAAD,CACIhG,MAAO,CACHiG,OAAQ,gBACRC,QAAS,OACTC,WAAY,UAEhBC,UAAW,GAEX,kBAAClC,EAAD,CACIjC,IAAK6D,EAAGnE,GACRe,WAAYoD,EAAGnE,GACfwC,SAAU2B,EAAGtD,mBClD7B6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCZAC,EAAaC,YAAgB,CAC/BrC,gBPkB2B,WAA2E,IAA1EnB,EAAyE,uDAAjEZ,EAAcqE,EAAmD,uCACrG,OAAQA,EAAOjE,MACX,IAZoB,eAahB,MAAM,CACF,CAAChB,GAAIiF,EAAOjF,GAAIjC,MAAOkH,EAAOlH,MAAO8C,OAAQ,QADjD,mBAEOW,IAGX,IAfgB,kBAgBZ,OAAOA,EAAMX,QAAO,SAACqE,GAAD,OAAOA,EAAElF,KAAOiF,EAAOlE,cAE/C,IApBuB,yBAqBnB,OAAOS,EAAMqB,KAAI,SAACsC,GAAD,OACbA,EAASnF,KAAOiF,EAAOlE,WAAvB,2BACUoE,GADV,IACoBtE,OAAQoE,EAAOpE,SAC7BsE,KAGd,IA1BoB,sBA2BhB,OAAO3D,EAAMqB,KAAI,SAAClE,GAAD,OACbA,EAAEqB,KAAOiF,EAAOlE,WAAhB,2BAAiCpC,GAAjC,IAAoCZ,MAAOkH,EAAOlH,QAASY,KAGnE,QACI,OAAO6C,IOzCfC,YNyBuB,WAAwE,IAAvED,EAAsE,uDAA9DZ,EAAcqE,EAAgD,uCAC9F,OAAQA,EAAOjE,MACX,IDpBoB,eCqBjB,OAAO,2BAAKQ,GAAZ,kBAAoByD,EAAOjF,GAAK,KAEnC,IApBS,WAqBL,IAAIoF,EAAU,CAACpF,GAAIW,eAAM5C,MAAOkH,EAAOlH,MAAOkD,QAAQ,GACtD,OAAO,2BACAO,GADP,kBAEKyD,EAAOlE,WAFZ,CAE0BqE,GAF1B,mBAEsC5D,EAAMyD,EAAOlE,gBAGvD,IA1BY,cA2BR,OAAO,2BAAIS,GAAX,kBACKyD,EAAOlE,WAAaS,EAAMyD,EAAOlE,YAAYF,QAAO,SAACc,GAAD,OACjDA,EAAE3B,KAAOiF,EAAO/C,YAE5B,IA7BgB,kBA8BZ,OAAO,2BACAV,GADP,kBAEKyD,EAAOlE,WAAaS,EAAMyD,EAAOlE,YAAY8B,KAAI,SAACwC,GAAD,OAC9CA,EAAGrF,KAAOiF,EAAO9D,OAAjB,2BAA8BkE,GAA9B,IAAkCtH,MAAOkH,EAAOlH,QAASsH,OAIrE,IAtCmB,qBAuCf,OAAO,2BACA7D,GADP,kBAEKyD,EAAOlE,WAAaS,EAAMyD,EAAOlE,YAAY8B,KAAI,SAACwC,GAAD,OAC9CA,EAAGrF,KAAOiF,EAAO/C,OAAjB,2BAA8BmD,GAA9B,IAAkCpE,OAAQgE,EAAOhE,SAAUoE,OAIvE,QACI,OAAO7D,MMxDN8D,EAAQC,YAAYR,GCHjCS,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEFI,SAASC,eAAe,SF+HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvG,GACLwG,QAAQxG,MAAMA,EAAMyG,c","file":"static/js/main.5bc0876d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__2LeLg\",\"container\":\"Task_container__3kyj7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"AddTodoList_main__2gwcY\",\"error\":\"AddTodoList_error__2qVvA\",\"error_message\":\"AddTodoList_error_message__1CetP\"};","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype TodoListHeaderPropsType = {\r\n    title: string\r\n    editTitle: ( title: string) => void\r\n}\r\n\r\nexport function RenameSpanFunction (props: TodoListHeaderPropsType) {\r\n    const [newTitle, setNewTitle] = useState<string>(props.title);\r\n    const [edit, setShowInput] = useState<boolean>(false);\r\n\r\n    const onClick = () => setShowInput(!edit)\r\n    const onBlurHandler = () => {\r\n        props.editTitle(newTitle)\r\n        setShowInput(!edit)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setNewTitle(e.currentTarget.value)\r\n\r\n    return (\r\n        edit\r\n           ? <TextField style={{width: \"120px\"}} color={\"success\"} variant={\"standard\"} value={newTitle} onChange={ onChangeHandler } autoFocus onBlur={ onBlurHandler }/>\r\n            : <span onDoubleClick={ onClick } >{props.title}</span>\r\n\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\nimport {FilterValuesType} from \"../Redux-Reducers/Task-Reducer\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    activeButton: FilterValuesType\r\n}\r\n\r\nfunction Buttons({title, onClickHandler, activeButton}: ButtonPropsType) {\r\n    return (\r\n        <Button\r\n            color={activeButton === title ? \"success\" : \"success\"}\r\n            variant={activeButton === title ? \"contained\" : \"outlined\"}\r\n            onClick={onClickHandler}>\r\n            {title}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default Buttons;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBoxTwoTone} from \"@mui/icons-material\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\n\r\n\r\ntype AddPanelType = {\r\n    id: string\r\n    addTask: (todolistId: string, title: string) => void\r\n}\r\n\r\nexport const AddPanel = React.memo((props: AddPanelType) => {\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.ctrlKey || e.key === \"Enter\") {\r\n            addTaskHandler()\r\n        }\r\n    }\r\n    const addTaskHandler = () => {\r\n        if (newTaskTitle.trim() !== \"\") {\r\n            props.addTask(props.id, newTaskTitle.trim())\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required !\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                color={\"success\"}\r\n                helperText={error}\r\n                error={!!error}\r\n                variant={\"standard\"}\r\n                label={\"Name of your task\"}\r\n                id={\"outlined-basic\"}\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressAddTask}\r\n                autoComplete={\"offline\"}/>\r\n            <IconButton\r\n                onClick={addTaskHandler}>\r\n                <AddBoxTwoTone />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n\r\n","import {v1} from 'uuid'\r\nimport {FilterValuesType} from './Task-Reducer'\r\n\r\nexport type ActionsTodolistTypes = AddTodolistActionType | RemoveTodolistActionType | ChangeFilterTodolistActionType | EditTitleTodolistActionType;\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type ChangeFilterTodolistActionType = ReturnType<typeof changeFilterAC>;\r\nexport type EditTitleTodolistActionType = ReturnType<typeof editTitleTodolistAC>;\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n};\r\nexport type InitialStateType = TodoListsType[];\r\n\r\nexport const ADD_TODOLIST = 'ADD_TODOLIST';\r\nconst CHANGE_FILTER_TODOLIST = 'CHANGE_FILTER_TODOLIST';\r\nconst EDIT_TITLE_TODOLIST = 'EDIT_TITLE_TODOLIST';\r\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST';\r\n\r\nexport const todolistId1 = v1();\r\nconst initialState: InitialStateType = [\r\n    {id: todolistId1, title: 'What to learn', filter: 'All'},\r\n];\r\n\r\nexport const todolistReducer = (state = initialState, action: ActionsTodolistTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST: {\r\n            return [\r\n                {id: action.id, title: action.title, filter: 'All'},\r\n                ...state\r\n            ]\r\n        }\r\n        case REMOVE_TODOLIST: {\r\n            return state.filter((f) => f.id !== action.todolistId)\r\n        }\r\n        case CHANGE_FILTER_TODOLIST: {\r\n            return state.map((todolist) =>\r\n                todolist.id === action.todolistId\r\n                    ? {...todolist, filter: action.filter}\r\n                    : todolist\r\n            )\r\n        }\r\n        case EDIT_TITLE_TODOLIST: {\r\n            return state.map((e) =>\r\n                e.id === action.todolistId ? {...e, title: action.title} : e\r\n            )\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTodolistAC = (title: string) => {\r\n    return {type: ADD_TODOLIST, title, id: v1()} as const\r\n};\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {type: REMOVE_TODOLIST, todolistId} as const\r\n};\r\nexport const changeFilterAC = (todolistId: string, filter: FilterValuesType) => {\r\n    return {type: CHANGE_FILTER_TODOLIST, todolistId, filter} as const\r\n};\r\nexport const editTitleTodolistAC = (todolistId: string, title: string) => {\r\n    return {type: EDIT_TITLE_TODOLIST, todolistId, title} as const\r\n};\r\n","import {v1} from 'uuid'\r\nimport {ADD_TODOLIST, AddTodolistActionType, todolistId1} from './Todolist-Reducer'\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n};\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed';\r\ntype AllActionTaskType = AddTaskActionType | RemoveTaskActionType | ChangeStatusTaskActionType | EditTitleTaskActionType | AddTodolistActionType;\r\nexport type initialStateType = {\r\n    [key: string]: TaskType[]\r\n};\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>;\r\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>;\r\ntype ChangeStatusTaskActionType = ReturnType<typeof changeStatusTaskAC>;\r\ntype EditTitleTaskActionType = ReturnType<typeof editTitleTaskAC>;\r\n\r\nconst ADD_TASK = 'ADD_TASK';\r\nconst REMOVE_TASK = 'REMOVE_TASK';\r\nconst CHANGE_STATUS_TASK = 'CHANGE_STATUS_TASK';\r\nconst EDIT_TITLE_TASK = 'EDIT_TITLE_TASK';\r\n\r\nconst initialState: initialStateType = {\r\n    [todolistId1]: [\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS/ES6', isDone: true},\r\n        {id: v1(), title: 'React', isDone: true},\r\n        {id: v1(), title: 'Redux-Reducers', isDone: false},\r\n        {id: v1(), title: 'Bootstrap', isDone: false},\r\n    ],\r\n};\r\n\r\nexport const taskReducer = (state = initialState, action: AllActionTaskType): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST: {\r\n           return  {...state, [action.id]: []}\r\n        }\r\n        case ADD_TASK: {\r\n            let newTask = {id: v1(), title: action.title, isDone: false}\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [newTask, ...state[action.todolistId]],\r\n            }\r\n        }\r\n        case REMOVE_TASK: {\r\n            return {...state,\r\n                [action.todolistId]: state[action.todolistId].filter((t) =>\r\n                    t.id !== action.taskID)}\r\n        }\r\n        case EDIT_TITLE_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map((el) =>\r\n                    el.id === action.taskId ? {...el, title: action.title} : el\r\n                ),\r\n            }\r\n        }\r\n        case CHANGE_STATUS_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map((el) =>\r\n                    el.id === action.taskID ? {...el, isDone: action.isDone} : el\r\n                ),\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (todolistId: string, title: string) => {\r\n    return {type: ADD_TASK, todolistId, title} as const\r\n};\r\nexport const removeTaskAC = (taskID: string, todolistId: string) => {\r\n    return {type: REMOVE_TASK, todolistId, taskID} as const\r\n};\r\nexport const changeStatusTaskAC = (todolistId: string, taskID: string, isDone: boolean) => {\r\n    return {type: CHANGE_STATUS_TASK, todolistId, taskID, isDone} as const\r\n};\r\nexport const editTitleTaskAC = (todolistId: string, taskId: string, title: string) => {\r\n    return {type: EDIT_TITLE_TASK, todolistId, taskId, title} as const\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from \"./Task.module.css\";\r\nimport {RenameSpanFunction} from \"../RenameSpanFunction\";\r\nimport {DeleteTwoTone} from \"@mui/icons-material\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {changeStatusTaskAC, editTitleTaskAC, removeTaskAC, TaskType} from \"../../Redux-Reducers/Task-Reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StoreType} from \"../../Redux-Reducers/store-redux\";\r\n\r\ntype TaskPropsType = {\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({todolistId, taskId}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const task = useSelector<StoreType, TaskType | undefined>(state => state.taskReducer[todolistId].find(t => t.id === taskId));\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => dispatch(changeStatusTaskAC(todolistId, taskId, e.currentTarget.checked));\r\n    const onClickRemoveTask = () => dispatch(removeTaskAC(taskId, todolistId));\r\n    const onEditTitleTaskHandler = (title: string) => dispatch(editTitleTaskAC(todolistId, taskId, title));\r\n\r\n    if(!task) return <div>Error...</div>\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <li key={taskId}\r\n                className={task.isDone ? s.is_done : \"\"}>\r\n                <Checkbox\r\n                    color=\"default\"\r\n                          checked={task.isDone}\r\n                          onChange={onChangeHandler}\r\n                />\r\n                <RenameSpanFunction title={task.title} editTitle={onEditTitleTaskHandler}/>\r\n                <IconButton\r\n                    onClick={onClickRemoveTask}>\r\n                    <DeleteTwoTone />\r\n                </IconButton>\r\n            </li>\r\n        </div>\r\n    )\r\n});\r\n","import React from 'react';\r\nimport { RenameSpanFunction } from '../RenameSpanFunction';\r\nimport Button from '../Button';\r\nimport { AddPanel } from '../AddPanel/AddPanel';\r\nimport { DeleteTwoTone } from '@mui/icons-material';\r\nimport { IconButton } from '@mui/material';\r\nimport { addTaskAC, FilterValuesType, TaskType,} from '../../Redux-Reducers/Task-Reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { StoreType } from '../../Redux-Reducers/store-redux';\r\nimport { Task } from '../Task/Task';\r\nimport { changeFilterAC, editTitleTodolistAC, removeTodolistAC, TodoListsType,} from '../../Redux-Reducers/Todolist-Reducer';\r\n\r\ntype TodoListPropsType = {\r\n   todolistId: string\r\n   filterBS: FilterValuesType\r\n};\r\n\r\nexport const TodoList = React.memo(({ todolistId, filterBS }: TodoListPropsType) => {\r\n   const dispatch = useDispatch()\r\n   const tasks = useSelector<StoreType, TaskType[]>(\r\n      (state) => state.taskReducer[todolistId]\r\n   )\r\n   const todoList = useSelector<StoreType, TodoListsType>(\r\n      (state) => state.todolistReducer.filter((e) => e.id === todolistId)[0]\r\n   )\r\n\r\n   let filteredTasks = (filter: FilterValuesType) => {\r\n      if (filter === 'Active') {\r\n         return tasks.filter((e) => !e.isDone)\r\n      } else if (filter === 'Completed') {\r\n         return tasks.filter((e) => e.isDone)\r\n      } else return tasks\r\n   }\r\n\r\n   const tasksComponents = filteredTasks(todoList.filter).map((task) => {\r\n      return <Task key={task.id} taskId={task.id} todolistId={todolistId} />\r\n   })\r\n\r\n\r\n   const onAllClickHandler = () => dispatch(changeFilterAC(todolistId, 'All'));\r\n   const onActiveClickHandler = () => dispatch(changeFilterAC(todolistId, 'Active'));\r\n   const onCompletedClickHandler = () => dispatch(changeFilterAC(todolistId, 'Completed'));\r\n\r\n   const editTitleTodolistHandler = (title: string) =>\r\n      dispatch(editTitleTodolistAC(todolistId, title))\r\n   const RemoveTodolist = () => dispatch(removeTodolistAC(todolistId))\r\n\r\n   const addTask = (todolistId: string, title: string) =>\r\n      dispatch(addTaskAC(todolistId, title))\r\n\r\n   return (\r\n      <>\r\n         <div>\r\n            <IconButton style={{ float: 'right' }} onClick={RemoveTodolist}>\r\n               <DeleteTwoTone />\r\n            </IconButton>\r\n            <h3>\r\n               <RenameSpanFunction\r\n                  title={todoList.title}\r\n                  editTitle={editTitleTodolistHandler}\r\n               />\r\n            </h3>\r\n            <AddPanel addTask={addTask} id={todolistId} />\r\n            <ul>{tasksComponents}</ul>\r\n            <div>\r\n               <Button\r\n                  activeButton={filterBS}\r\n                  onClickHandler={onAllClickHandler}\r\n                  title={'All'}\r\n               />\r\n               <Button\r\n                  activeButton={filterBS}\r\n                  onClickHandler={onActiveClickHandler}\r\n                  title={'Active'}\r\n               />\r\n               <Button\r\n                  activeButton={filterBS}\r\n                  onClickHandler={onCompletedClickHandler}\r\n                  title={'Completed'}\r\n               />\r\n            </div>\r\n         </div>\r\n      </>\r\n   )\r\n});\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from \"./AddTodoList.module.css\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBoxTwoTone} from \"@mui/icons-material\";\r\n\r\nexport type AddTodolistType = {\r\n    addTodolist: (newTodolistTitle: string) => void\r\n}\r\n\r\nexport const AddTodolist = React.memo(({addTodolist, ...props}: AddTodolistType) => {\r\n\r\n    const [newTodolistTitle, setNewTodolistTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTodolistTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTodo = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.ctrlKey || e.key === \"Enter\") {\r\n            addTaskHandler()\r\n        }\r\n    }\r\n    const addTaskHandler = () => {\r\n        if (newTodolistTitle.trim() !== \"\") {\r\n            addTodolist(newTodolistTitle)\r\n            setNewTodolistTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required !\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <div>\r\n                <TextField\r\n                    size={\"small\"}\r\n                    helperText={error}\r\n                    color={\"warning\"}\r\n                    error={!!error}\r\n                    variant={\"standard\"}\r\n                    label={\"Add Name to Todolist\"}\r\n                    id={\"outlined-basic\"}\r\n                    value={newTodolistTitle}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressAddTodo}\r\n                />\r\n                <IconButton\r\n                    onClick={addTaskHandler}>\r\n                    <AddBoxTwoTone/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {TodoList} from './Component/TodoList/TodoList'\r\nimport AppBar from '@mui/material/AppBar'\r\nimport Container from '@mui/material/Container'\r\nimport Grid from '@mui/material/Grid'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport Paper from '@mui/material/Paper'\r\nimport Toolbar from '@mui/material/Toolbar'\r\nimport {Menu} from '@mui/icons-material'\r\nimport {AddTodolist} from './Component/AddTodoList/AddTodoList'\r\nimport {addTodolistAC, TodoListsType} from './Redux-Reducers/Todolist-Reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {StoreType} from './Redux-Reducers/store-redux';\r\n\r\nexport const App = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<StoreType, TodoListsType[]>(\r\n        (state) => state.todolistReducer\r\n    )\r\n\r\n    const addTodolist = (title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }\r\n\r\n    //UI\r\n    return (\r\n        <div className={'App'}>\r\n            <AppBar position={'static'} color={\"primary\"}>\r\n                <Container maxWidth={'xl'}>\r\n                    <Grid container>\r\n                        <Toolbar>\r\n                            <IconButton\r\n                                color={'inherit'}\r\n                                aria-label={'menu'}\r\n                                size=\"large\"\r\n                            >\r\n                                <Menu/>\r\n                            </IconButton>\r\n                            <AddTodolist addTodolist={addTodolist}/>\r\n                        </Toolbar>\r\n                    </Grid>\r\n                </Container>\r\n            </AppBar>\r\n\r\n            <Grid container spacing={3}>\r\n                {todoLists.map((tl) => {\r\n\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper\r\n                                style={{\r\n                                    margin: '30px 0 0 20px',\r\n                                    padding: '30px',\r\n                                    alignItems: 'center',\r\n                                }}\r\n                                elevation={3}\r\n                            >\r\n                                <TodoList\r\n                                    key={tl.id}\r\n                                    todolistId={tl.id}\r\n                                    filterBS={tl.filter}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        </div>\r\n    )\r\n})\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistReducer} from \"./Todolist-Reducer\";\r\nimport {taskReducer} from \"./Task-Reducer\";\r\n\r\nexport type StoreType = ReturnType<typeof storeRedux>\r\n\r\nconst storeRedux = combineReducers({\r\n    todolistReducer,\r\n    taskReducer\r\n})\r\n\r\nexport const store = createStore(storeRedux);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./Redux-Reducers/store-redux\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}